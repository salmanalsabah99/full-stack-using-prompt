generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  password        String
  resetToken      String?        @unique
  resetTokenExpiry DateTime?
  events          Event[]
  notes           Note[]
  taskLists       TaskList[]
  tasks           Task[]
  noteCategories  NoteCategory[]

  @@map("users")
}

model TaskList {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([userId], map: "task_lists_userId_fkey")
  @@map("task_lists")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  taskListId  String
  events      Event[]
  notes       Note[]
  taskList    TaskList   @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskListId], map: "tasks_taskListId_fkey")
  @@index([userId], map: "tasks_userId_fkey")
  @@map("tasks")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes       Note[]

  @@index([taskId], map: "events_taskId_fkey")
  @@index([userId], map: "events_userId_fkey")
  @@map("events")
}

model Note {
  id          String       @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  taskId      String?
  eventId     String?
  categoryId  String?
  event       Event?       @relation(fields: [eventId], references: [id])
  task        Task?        @relation(fields: [taskId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    NoteCategory? @relation(fields: [categoryId], references: [id])

  @@index([eventId], map: "notes_eventId_fkey")
  @@index([taskId], map: "notes_taskId_fkey")
  @@index([userId], map: "notes_userId_fkey")
  @@index([categoryId], map: "notes_categoryId_fkey")
  @@map("notes")
}

model NoteCategory {
  id        String   @id @default(cuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes     Note[]

  @@index([userId], map: "note_categories_userId_fkey")
  @@map("note_categories")
}

enum TaskStatus {
  TODO
  WAITING
  HOLD
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
