// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model - Core entity for authentication and ownership
model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  taskLists TaskList[]
  tasks     Task[]
  events    Event[]

  @@map("users")
}

// TaskList model - Represents a collection of tasks (e.g., "Work", "Personal")
model TaskList {
  id          String   @id @default(cuid())
  name        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@map("task_lists")
}

// Task model - Core entity for task management
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskListId String
  taskList   TaskList   @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  events     Event[]    // Tasks can be linked to multiple events

  @@map("tasks")
}

// Event model - For calendar events
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId String?
  task   Task?  @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("events")
}

// Enums
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 